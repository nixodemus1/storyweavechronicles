{
    "swagger": "2.0",
    "basePath": "/",
    "paths": {
        "/api/add-bookmark": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_add_bookmark",
                "tags": [
                    "books"
                ]
            }
        },
        "/api/add-comment": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_add_comment",
                "tags": [
                    "comments"
                ]
            }
        },
        "/api/add-secondary-email": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_add_secondary_email",
                "tags": [
                    "auth"
                ]
            }
        },
        "/api/all-books": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "get_all_books",
                "tags": [
                    "books"
                ]
            }
        },
        "/api/authorize": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "get_authorize",
                "tags": [
                    "integrations"
                ]
            }
        },
        "/api/ban-user": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_ban_user",
                "tags": [
                    "admin"
                ]
            }
        },
        "/api/book-votes": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "get_book_votes",
                "tags": [
                    "votes"
                ]
            }
        },
        "/api/books": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "get_books_by_ids",
                "tags": [
                    "books"
                ]
            }
        },
        "/api/bootstrap-admin": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_bootstrap_admin",
                "tags": [
                    "admin"
                ]
            }
        },
        "/api/cancel-session": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "summary": "Cancel all active and queued requests for a given session_id and type ('cover' or 'text')",
                "description": "Body: { \"session_id\": \"...\", \"type\": \"cover\" | \"text\" }",
                "operationId": "post_cancel_session",
                "tags": [
                    "books"
                ]
            }
        },
        "/api/change-password": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_change_password",
                "tags": [
                    "auth"
                ]
            }
        },
        "/api/cover-diagnostics": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "get_cover_diagnostics",
                "tags": [
                    "health"
                ]
            }
        },
        "/api/cover-exists/{file_id}": {
            "parameters": [
                {
                    "name": "file_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "get_cover_exists",
                "tags": [
                    "books"
                ]
            }
        },
        "/api/cover-queue-health": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "get_cover_queue_health",
                "tags": [
                    "health"
                ]
            }
        },
        "/api/covers/{cover_id}.jpg": {
            "parameters": [
                {
                    "name": "cover_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "summary": "Serve cached cover image from disk",
                "description": "If missing, serve fallback image.\nIf ?status=1 is passed, return JSON status instead of image.",
                "operationId": "get_serve_cover",
                "tags": [
                    "books"
                ]
            }
        },
        "/api/delete-all-notification-history": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_delete_all_notification_history",
                "tags": [
                    "notifications"
                ]
            }
        },
        "/api/delete-comment": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_delete_comment",
                "tags": [
                    "comments"
                ]
            }
        },
        "/api/delete-notification": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_delete_notification",
                "tags": [
                    "notifications"
                ]
            }
        },
        "/api/dismiss-all-notifications": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_dismiss_all_notifications",
                "tags": [
                    "notifications"
                ]
            }
        },
        "/api/drive-webhook": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_drive_webhook",
                "tags": [
                    "integrations"
                ]
            }
        },
        "/api/edit-comment": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_edit_comment",
                "tags": [
                    "comments"
                ]
            }
        },
        "/api/export-account": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_export_account",
                "tags": [
                    "auth"
                ]
            }
        },
        "/api/get-bookmarks": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_get_bookmarks",
                "tags": [
                    "books"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "get_get_bookmarks",
                "tags": [
                    "books"
                ]
            }
        },
        "/api/get-comment-votes": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "get_get_comment_votes",
                "tags": [
                    "comments"
                ]
            }
        },
        "/api/get-comments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "get_get_comments",
                "tags": [
                    "comments"
                ]
            }
        },
        "/api/get-notification-history": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_get_notification_history",
                "tags": [
                    "notifications"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "get_get_notification_history",
                "tags": [
                    "notifications"
                ]
            }
        },
        "/api/get-notification-prefs": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_get_notification_prefs",
                "tags": [
                    "notifications"
                ]
            }
        },
        "/api/get-user": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_get_user",
                "tags": [
                    "auth"
                ]
            }
        },
        "/api/get-user-meta": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "get_get_user_meta",
                "tags": [
                    "auth"
                ]
            }
        },
        "/api/github-webhook": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "summary": "Receives GitHub webhook payload for push events and sends app update notifications to all users",
                "operationId": "post_github_webhook",
                "tags": [
                    "integrations"
                ]
            }
        },
        "/api/has-new-comments": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_has_new_comments",
                "tags": [
                    "comments"
                ]
            }
        },
        "/api/has-new-notifications": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_has_new_notifications",
                "tags": [
                    "notifications"
                ]
            }
        },
        "/api/health": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "summary": "Health check endpoint for Render",
                "description": "com. Returns 200 OK and JSON status.\nOnly log if status is not 200.",
                "operationId": "get_health_check",
                "tags": [
                    "health"
                ]
            }
        },
        "/api/import-account": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_import_account",
                "tags": [
                    "auth"
                ]
            }
        },
        "/api/landing-page-book-ids": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "summary": "Returns the list of book IDs for the landing page (carousel + top voted)",
                "operationId": "get_landing_page_book_ids",
                "tags": [
                    "books"
                ]
            }
        },
        "/api/list-pdfs/{folder_id}": {
            "parameters": [
                {
                    "name": "folder_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "get_list_pdfs",
                "tags": [
                    "health"
                ]
            }
        },
        "/api/login": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_login",
                "tags": [
                    "auth"
                ]
            }
        },
        "/api/make-admin": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_make_admin",
                "tags": [
                    "admin"
                ]
            }
        },
        "/api/mark-all-notifications-read": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_mark_all_notifications_read",
                "tags": [
                    "notifications"
                ]
            }
        },
        "/api/mark-notification-read": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_mark_notification_read",
                "tags": [
                    "notifications"
                ]
            }
        },
        "/api/moderate-comment": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_moderate_comment",
                "tags": [
                    "admin"
                ]
            }
        },
        "/api/notify-app-update": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_notify_app_update",
                "tags": [
                    "notifications"
                ]
            }
        },
        "/api/notify-book-update": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_notify_book_update",
                "tags": [
                    "notifications"
                ]
            }
        },
        "/api/notify-new-book": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_notify_new_book",
                "tags": [
                    "notifications"
                ]
            }
        },
        "/api/notify-reply": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_notify_reply",
                "tags": [
                    "notifications"
                ]
            }
        },
        "/api/pdf-cover/{file_id}": {
            "parameters": [
                {
                    "name": "file_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "summary": "Queue a cover extraction for file_id (FIFO, dedup)",
                "description": "If already queued, do nothing. If at front, process immediately.",
                "operationId": "get_pdf_cover",
                "tags": [
                    "books"
                ]
            }
        },
        "/api/pdf-text/{file_id}": {
            "parameters": [
                {
                    "name": "file_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "summary": "Extracts text and images from a single PDF page in Google Drive by file_id and page number",
                "description": "Query params: page (1-based), session_id (optional)\nReturns: {\"success\": True, \"page\": n, \"text\": ..., \"images\": [...]} or error JSON.",
                "operationId": "get_pdf_text",
                "tags": [
                    "books"
                ]
            }
        },
        "/api/rebuild-cover-cache": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "summary": "Rebuild atlas and cache covers for provided book_ids (landing page), or fallback to DB if not provided",
                "operationId": "post_rebuild_cover_cache",
                "tags": [
                    "books"
                ]
            }
        },
        "/api/register": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_register",
                "tags": [
                    "auth"
                ]
            }
        },
        "/api/remove-admin": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_remove_admin",
                "tags": [
                    "admin"
                ]
            }
        },
        "/api/remove-bookmark": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_remove_bookmark",
                "tags": [
                    "books"
                ]
            }
        },
        "/api/remove-secondary-email": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_remove_secondary_email",
                "tags": [
                    "auth"
                ]
            }
        },
        "/api/seed-drive-books": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "summary": "Manually repopulate the Book table from all PDFs in the configured Google Drive folder",
                "description": "Returns: {success, added_count, skipped_count, errors}",
                "operationId": "post_seed_drive_books",
                "tags": [
                    "health"
                ]
            }
        },
        "/api/send-emergency-email": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_send_emergency_email",
                "tags": [
                    "admin"
                ]
            }
        },
        "/api/send-newsletter": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_send_newsletter",
                "tags": [
                    "admin"
                ]
            }
        },
        "/api/send-scheduled-emails": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "summary": "Trigger the send_scheduled_emails function for a given frequency",
                "description": "Expected JSON payload: { \"frequency\": \"daily\" }",
                "operationId": "post_send_scheduled_emails",
                "tags": [
                    "notifications"
                ]
            }
        },
        "/api/server-health": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "summary": "Health check endpoint: verifies DB connectivity",
                "description": "Returns success: true if DB responds, else false.",
                "operationId": "get_server_health",
                "tags": [
                    "health"
                ]
            }
        },
        "/api/simulate-cover-load": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "summary": "Simulate many users requesting static cover images concurrently for stress testing",
                "description": "POST data: {\"file_ids\": [\"id1\", \"id2\", ...], \"num_users\": 200, \"concurrency\": 20}",
                "operationId": "post_simulate_cover_load",
                "tags": [
                    "health"
                ]
            }
        },
        "/api/test-send-scheduled-notifications": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "summary": "Test endpoint to send a batch of fake notifications to a specified email address using the notification email function",
                "description": "POST data: {\"test_email\": \"your@email.com\", \"num_notifications\": 10}",
                "operationId": "post_test_send_scheduled_notifications",
                "tags": [
                    "health"
                ]
            }
        },
        "/api/top-voted-books": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "get_top_voted_books",
                "tags": [
                    "votes"
                ]
            }
        },
        "/api/unban-user": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_unban_user",
                "tags": [
                    "admin"
                ]
            }
        },
        "/api/update-bookmark-meta": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_update_bookmark_meta",
                "tags": [
                    "books"
                ]
            }
        },
        "/api/update-colors": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_update_colors",
                "tags": [
                    "auth"
                ]
            }
        },
        "/api/update-external-id": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "summary": "Update a book's external_story_id if a new PDF version contains a valid external ID and the current value is missing or blank",
                "description": "Body: { \"book_id\": <drive_id>, \"pdf_bytes\": <base64-encoded PDF> }",
                "operationId": "post_update_external_id",
                "tags": [
                    "books"
                ]
            }
        },
        "/api/update-notification-prefs": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_update_notification_prefs",
                "tags": [
                    "notifications"
                ]
            }
        },
        "/api/update-profile-settings": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_update_profile_settings",
                "tags": [
                    "auth"
                ]
            }
        },
        "/api/user-comments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "get_user_comments",
                "tags": [
                    "comments"
                ]
            }
        },
        "/api/user-top-voted-books": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "get_user_top_voted_books",
                "tags": [
                    "votes"
                ]
            }
        },
        "/api/user-voted-books": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "get_user_voted_books",
                "tags": [
                    "votes"
                ]
            }
        },
        "/api/vote-book": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_vote_book",
                "tags": [
                    "votes"
                ]
            }
        },
        "/api/vote-comment": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_vote_comment",
                "tags": [
                    "comments"
                ]
            }
        }
    },
    "info": {
        "title": "Storyweave Chronicles API",
        "version": "3.0",
        "description": "API documentation for Storyweave Chronicles"
    },
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "tags": [
        {
            "name": "auth",
            "description": "Authentication and user management"
        },
        {
            "name": "admin",
            "description": "Admin and moderation"
        },
        {
            "name": "books",
            "description": "Book and PDF management"
        },
        {
            "name": "votes",
            "description": "Voting endpoints"
        },
        {
            "name": "comments",
            "description": "Comments and discussion"
        },
        {
            "name": "notifications",
            "description": "Notifications and alerts"
        },
        {
            "name": "health",
            "description": "Health and diagnostics"
        },
        {
            "name": "integrations",
            "description": "Webhooks and integrations"
        }
    ],
    "responses": {
        "ParseError": {
            "description": "When a mask can't be parsed"
        },
        "MaskError": {
            "description": "When any error occurs on mask"
        }
    }
}
