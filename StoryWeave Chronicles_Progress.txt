# StoryWeave Chronicles – Project Status & Roadmap (September 13, 2025)

## ✅ Current State & Completed Features

- **User Profiles:**  
  - ✅ Persistent settings (color, font, timezone) via LocalStorage and SQLAlchemy.
  - ✅ Sidebar tab layout for navigation (profile, settings, notifications, account).

- **Bookmarks/Favorites:**  
  - ✅ Add/remove bookmarks, persistent across sessions.
  - ✅ Bookmarks visible in user profile.
  - ✅ Export/import planned.

- **Voting System:**  
  - ✅ Backend and UI for voting on books.
  - ✅ Top lists and carousel UI for newest/most voted books.

- **Comment & Reply System:**  
  - ✅ Backend and UI for comments and replies.
  - ✅ SQLAlchemy models for moderation.

- **Notification System:**  
  - ✅ In-app notifications (tab/dropdown).
  - ✅ Email notifications via Flask-Mail.
  - ✅ Notification preferences.

- **Security Features:**  
  - ✅ Password change, secondary email, account deletion.
  - ✅ Security tab in UI.

- **Database Migration:**  
  - ✅ PostgreSQL on Render.com (1GB, expires monthly).
  - ✅ SQLAlchemy ORM for all models.

- **General UI/UX:**  
  - ✅ Sidebar navigation, tabbed layout, logout.
  - ✅ UI cleanup, placeholders/progress indicators for covers.
  - ✅ Page-by-page text loading for readers.

- **Optimization Achievements:**  
  - ✅ Reduced requests, bandwidth, and RAM usage.
  - ✅ DOMContentLoaded and load times <1s.
  - ✅ Robust backend queue/lock management.
  - ✅ Lazy loading and browser caching for images.
  - ✅ Pagination and async APIs.

- **Scalability:**  
  - ✅ Can serve ~1M loads/month on free tier.
  - ✅ Stable for 200 users (current: 172).

- **Backend Stability:**  
  - ✅ No server errors or restarts.
  - ✅ Stable PDF processing and queue management.

## ✅ Recent Bug Fixes & Improvements

- ✅ Fixed notification dropdown toggle and update logic.
- ✅ Provided feedback for admin rights changes.
- ✅ Optimized performance and data usage.
- ✅ Auto-setup timezone based on local time.
- ✅ Fixed infinite loop in update depth (search/account pages).
- ✅ Fixed document closing error.
- ✅ Color theme logic unified: instant updates to ThemeContext, CSS variables, and user object (fixes color lag/mismatch).
- ✅ Color theme edge cases and preview system fully resolved.
- ✅ Refactored context exports for fast refresh and build compatibility.
- ✅ Resolved build/deploy issues on Render.

## ☐ Remaining Bugs, Edge Cases & New Goals
☐ Admin features: logs, rate limiting, restore deleted content, user activity overview.
✅ Newsletter feature (non-functional).
✅ Export/import bookmarks.
✅ Carousel issues on mobile.
❌ Allow username changes after account creation.
☐ Routing/refresh error fix (production: still broken on Render.com, revisit _redirects and deployment config)
☐ Continue fixing any remaining bugs.

## Deployment Constraints

- **Render Free Tier:**  
  - 256 MB RAM, 0.1 CPU, 100 connections per instance.
  - 750 free instance hours/month.
  - Services spin down after 15 minutes inactivity.
  - PostgreSQL: 1GB, expires every 30 days (next: 09/13/2025).

## Future Goals

- ✅ Migrate database to Neon for more space and persistent storage.
- ✅ Reduce image/cover loading time (currently 47.6s).
- ✅ Further optimize RAM usage (image processing, caching).
- ☐ Consider service workers for offline access.
- ❌ Set up automated alerts for memory, queue length, error rates.
- ☐ UI polish, admin tools, and performance enhancements.

---

**Summary:**  
All core features and recent improvements are checked off. You’ve resolved color theme edge cases, context refactoring, and build/deploy issues. Next priorities: Neon migration and mobile carousel fixes.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Here’s a concise action plan and summary for your cover caching optimization, suitable for onboarding or resuming work in a new session:

---

## StoryWeave Chronicles: Cover Caching Optimization Plan

### **Background**
- **Problem:** High RAM/CPU usage and slow load times due to repeated Google Drive downloads and PDF processing for book covers.
- **Constraints:** Render.com free tier (256 MB RAM, 0.1 CPU, ephemeral disk, 100 connections).
- **Goal:** Cache landing page book covers on disk, serve them directly, and minimize resource usage.

---

### **Checklist / Goals**

1. **Cover Storage Directory**
   - Save all processed cover images to `public/covers/cover_id.jpg`.
   - Use Flask’s static file serving or `send_from_directory` for access.

2. **Atlas JSON**
   - Maintain `public/covers/atlas.json` mapping book IDs to cover filenames.
   - On landing page update, compare new book list to atlas, delete unused covers, and download/process new ones.

3. **First-Load Rebuild**
   - On first request after server restart, rebuild atlas and download/process covers for current landing page books.
   - Save covers and update atlas.

4. **Serving Covers**
   - Serve covers from disk for all requests.
   - If a cover is missing, serve frontend-generated loading or no-cover images (keep these as fallback).

5. **Fallback Handling**
   - Always use frontend-generated loading and no-cover covers for missing/processing images.

6. **Resource Management**
   - Limit disk cache to 20–30 covers (carousel + top voted).
   - Handle ephemeral disk: covers/atlas are rebuilt after instance restart.

7. **Performance Monitoring**
   - Continue logging RAM/CPU usage for diagnostics.
   - Monitor for timeouts and optimize as needed.

---

### **Summary for New Sessions**

- The backend caches book covers for the landing page in `public/covers/`.
- An atlas JSON tracks which covers are present.
- Covers are rebuilt on first load after restart.
- Frontend loading/no-cover images are always used as fallback.
- The goal is to minimize RAM/CPU usage and speed up load times, within Render’s free tier limits.

---

**Ready to help with any step—just reference this checklist to get me up to speed!**
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

for definition so that we are on the same page: i am defining churn as = if the site deletes needed covers and then redownloads them wasting resources and time.
so with my react site, i have an atlas and a folder full of covers. the image name is the <cover id>.jpg. for some reason, it will do a comparison on the landing page list
remove covers that are in the folder believing it doesn't need them, realizes it DOES need those covers, and will redownload them. that is a churn to me.
if it were to delete, redownload, delete, redownload, that is 2 churns.

with definitions out of the way, i have had a churn problem every time i refresh the landing page. i can get all covers up and running perfectly. if i refresh to test,
the site for some reason deletes 10 covers saying they are not valid cause they dont exist. it then redownloads new versions. this is using up resources i can be putting
towards something else. remember i am deployed on render.com free tier. that doesn't give me a lot of resources to work with. so i need to make things as efficient and 
optimized as possible. which is why i want this churn gone!

(for memories sake:
- **Render Free Tier:**  
  - 256 MB RAM, 0.1 CPU, 100 connections per instance.
  - 750 free instance hours/month.
  - Services spin down after 15 minutes inactivity.
  - PostgreSQL: 1GB, expires every 30 days.)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
my second question was about flaskmail. so render is going to make a change next week that makes it so you cant send mail through the usual mail ports in free tier. which, is obviously bad considering that we use mail for emergencies, notifications, the newletter, ect. so mail is a big part of our system. im wondering if we have a workaround, or if i need to move to a new backend hosting provider. here is the email in full:

Starting next week, all free Render web services will block outbound network traffic to SMTP (email) ports 25, 465, and 587.

This change will be rolled out across all regions by Friday, September 26th.

One of your free web services has sent traffic to these ports in the past 30 days. To continue doing so, upgrade your service to any paid instance type. Alternatively, you can integrate with a managed email provider, such as SendGrid or Mailgun.

what are my options?
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
