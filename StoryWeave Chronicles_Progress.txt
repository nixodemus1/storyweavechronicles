# üìã StoryWeave Chronicles ‚Äì Project TODO List (September 17, 2025)

## ‚úÖ Completed & Stable
- Newsletter feature added
- Export/import bookmarks implemented
- Carousel mobile issues fixed (desktop/mobile both usable, needs polish)
- Database migrated to Neon (persistent, fast cover loading)
- Cover caching system optimized and stress tested
- RAM usage optimized (open to further improvements)
- Made a new cover system for the sake of being super optimized. (way faster and using way less memory if you can get over the first dry launch)
- managed to finally clean up and organize my back end. (will do the same for the front end once its completely stable)
- finally i can consider covers done on render. the download and everything works like a dream. i think it can handle 100 users no problem.
- fixed infinite polling with yet ANOTHER cover system. but this one is not only working, but is the most stable and the most optimized.
- FINALLY fixed the routing issue. no more!

---

## ‚òê Remaining Bugs & Improvements
- Carousel UI: polish for desktop and mobile
- for advertising: propellerads, adsterra, and revenuehits are the ones i want to look at the most.
- for OAuth and login credentials: firebase and clerk (might not do this one, i think our current setup might be fine. we'll see if i regret that decision)
- for new Mail provider: sendgrid or mailgun (can integrate with flaskmail)
- churn is back. it fixed itself for a bit and now its back. (doesn't do TOO much damage, but still anoying)

---

## üöÄ Future Goals
- Continue monitoring and optimizing RAM/CPU usage
- Add admin tools: logs, rate limiting, restore deleted content, user activity overview
- Set up automated alerts for memory, queue length, error rates
- Consider service workers for offline access
- General UI polish and performance enhancements
- Username changes (stretch goal, not prioritized)
- cleanup and organize front end

---
## Deployment Constraints

- **Render Free Tier:**  
  - 256 MB RAM, 0.1 CPU, 100 connections per instance.
  - 750 free instance hours/month.
  - Services spin down after 15 minutes inactivity.
  - PostgreSQL: 1GB, expires every 30 days (moved to neon, no need to worry about this).
---

**Summary:**
Most major features and optimizations are complete. Focus now shifts to bug fixes, UI polish, admin tools, and ongoing performance improvements. Let me know which item you want to tackle next!

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

for definition so that we are on the same page: i am defining churn as = if the site deletes needed covers and then redownloads them wasting resources and time.
so with my react site, i have an atlas and a folder full of covers. the image name is the <cover id>.jpg. for some reason, it will do a comparison on the landing page list
remove covers that are in the folder believing it doesn't need them, realizes it DOES need those covers, and will redownload them. that is a churn to me.
if it were to delete, redownload, delete, redownload, that is 2 churns.

with definitions out of the way, i have had a churn problem every time i refresh the landing page. i can get all covers up and running perfectly. if i refresh to test,
the site for some reason deletes 10 covers saying they are not valid cause they dont exist. it then redownloads new versions. this is using up resources i can be putting
towards something else. remember i am deployed on render.com free tier. that doesn't give me a lot of resources to work with. so i need to make things as efficient and 
optimized as possible. which is why i want this churn gone!

(for memories sake:
- **Render Free Tier:**  
  - 256 MB RAM, 0.1 CPU, 100 connections per instance.
  - 750 free instance hours/month.
  - Services spin down after 15 minutes inactivity.
  - PostgreSQL: 1GB, expires every 30 days.)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
no thanks just wanted to get you caught up to speed. so i just spent time cleaning up the backend and making it compatable with flask-restx so i can have my won openapi page. i did this because im setting up my CI/CD with help from github actions. the new setup im trying to have is local testing (what we are doing now) then a dev branch that goes live on render where i can test things in a live environment without worry. and then a production branch on github and render that users actually use. that way i can test and make new features. and if i break something the site isnt down for all users. i created another site specifically for dev on render. made a new branch called dev and connected it with render. made new branch rules so that you HAVE to pull request and pull requests HAVE to be approved to push changes from dev to prod. i also wanted to set up environments that dev has to pass before github will even let you make a pull request. one of those was a node tester (honestly thats how i found out that my current set up is only compatable with node 20 and onwards.) and now i want a way to be able to check the api to make sure they are robust and secure before we throw whatever new endpoints we make into prod. i found a github action for mayhem api. I created a mayhem account and as you just saw, i have refactored my entire flask app to be compatable and make an openapi page that mayhem can test against for security purposes. thats where we are at right now. that is the current state of the site right now. 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
well that is the reason i am telling you all this and getting you up to speed. i have 2 directions i want to go and i dont know which one i want to do first.
on one hand i want to work on these, cause these ARE the last 2 features i want to add before i let the site go public finally to our userbase:
- for advertising: propellerads, adsterra, and revenuehits are the ones i want to look at the most.
- for new Mail provider: sendgrid or mailgun (can integrate with flaskmail)
on the other hand, considering all the work i put in to get this CI/CD set up i would also like to take you up on your offer for these two:
- Help configure the Mayhem API GitHub Action for automated security checks
- Suggest additional CI/CD checks or environment protections

and i dont know which one i want to do first. like just finish setting up the CI/CD first or get the last 2 feature up and running first.

and thats not even counting the fact that some endpoints are now out of date and broken and desperately need an update. ex: simulate users uses the now outdated system for getting covers on the front end landing page. so it is kind of useless as an endpoint at the moment. but rather than just deleting it, i do want to refactor it to be actually useful to me agian. because being able to simulate a stress test is a very good way of knowing what my system can handle without having to somehow coordinate 100 people for the test. 

but thats where my head is at, i know they are all important, but i dont know which one i should tackle next. 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
