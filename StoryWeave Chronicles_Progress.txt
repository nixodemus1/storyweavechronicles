# üìã StoryWeave Chronicles ‚Äì Project TODO List (September 17, 2025)

## ‚úÖ Completed & Stable
- Newsletter feature added
- Export/import bookmarks implemented
- Carousel mobile issues fixed (desktop/mobile both usable, needs polish)
- Database migrated to Neon (persistent, fast cover loading)
- Cover caching system optimized and stress tested
- RAM usage optimized (open to further improvements)
- Made a new cover system for the sake of being super optimized. (way faster and using way less memory if you can get over the first dry launch)
- managed to finally clean up and organize my back end. (will do the same for the front end once its completely stable)
- finally i can consider covers done on render. the download and everything works like a dream. i think it can handle 100 users no problem. 

---

## ‚òê Remaining Bugs & Improvements
- Routing/refresh error: attempted fix, still unresolved (production, Render.com)
- Carousel UI: polish for desktop and mobile
- for advertising: propellerads, adsterra, and revenuehits are the ones i want to look at the most.
- for OAuth and login credentials: firebase and clerk
- for new Mail provider: sendgrid or mailgun (can integrate with flaskmail)
- Minor bugs: address issues found during stress testing
- Front end keeps polling after all covers are done downloading
- churn is back. it fixed itself for a bit and now its back.

---

## üöÄ Future Goals
- Continue monitoring and optimizing RAM/CPU usage
- Add admin tools: logs, rate limiting, restore deleted content, user activity overview
- Set up automated alerts for memory, queue length, error rates
- Consider service workers for offline access
- General UI polish and performance enhancements
- Username changes (stretch goal, not prioritized)
- cleanup and organize front end

---
## Deployment Constraints

- **Render Free Tier:**  
  - 256 MB RAM, 0.1 CPU, 100 connections per instance.
  - 750 free instance hours/month.
  - Services spin down after 15 minutes inactivity.
  - PostgreSQL: 1GB, expires every 30 days (moved to neon, no need to worry about this).
---

**Summary:**  
Most major features and optimizations are complete. Focus now shifts to bug fixes, UI polish, admin tools, and ongoing performance improvements. Let me know which item you want to tackle next!

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

for definition so that we are on the same page: i am defining churn as = if the site deletes needed covers and then redownloads them wasting resources and time.
so with my react site, i have an atlas and a folder full of covers. the image name is the <cover id>.jpg. for some reason, it will do a comparison on the landing page list
remove covers that are in the folder believing it doesn't need them, realizes it DOES need those covers, and will redownload them. that is a churn to me.
if it were to delete, redownload, delete, redownload, that is 2 churns.

with definitions out of the way, i have had a churn problem every time i refresh the landing page. i can get all covers up and running perfectly. if i refresh to test,
the site for some reason deletes 10 covers saying they are not valid cause they dont exist. it then redownloads new versions. this is using up resources i can be putting
towards something else. remember i am deployed on render.com free tier. that doesn't give me a lot of resources to work with. so i need to make things as efficient and 
optimized as possible. which is why i want this churn gone!

(for memories sake:
- **Render Free Tier:**  
  - 256 MB RAM, 0.1 CPU, 100 connections per instance.
  - 750 free instance hours/month.
  - Services spin down after 15 minutes inactivity.
  - PostgreSQL: 1GB, expires every 30 days.)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
