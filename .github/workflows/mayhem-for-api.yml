# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# This workflow starts your API and fuzzes it with ForAllSecure Mayhem for API
# to find reliability, performance and security issues before they reach
# production.
#
# To use this workflow, you will need to:
#
# 1. Create a Mayhem account at https://app.mayhem.security
#
# 2. Create an API token at https://app.mayhem.security/-/settings/user/api-tokens
#
# 3. Add the API token as a secret in GitHub called "MAYHEM_TOKEN"
#
# 4. Update the "Start your API" step to run your API in the background before
#    starting the Mayhem for API scan, and update the `api-url` & `api-spec`
#    field.
#
# If you have any questions, please contact us at mayhem4api@forallsecure.com

name: "Mayhem for API"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "dev" ]

permissions:
  security-events: write

jobs:
  mayhem-for-api:
    name: Mayhem for API
    runs-on: ubuntu-latest
    environment: development.env
    env:
      #PID
      Backend_PID: ""
      # Environment Secrets
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_USER: ${{ secrets.DB_USER }}
      GOOGLE_AUTH_CERT_URI: ${{ secrets.GOOGLE_AUTH_CERT_URI }}
      GOOGLE_AUTH_URI: ${{ secrets.GOOGLE_AUTH_URI }}
      GOOGLE_CLIENT_EMAIL: ${{ secrets.GOOGLE_CLIENT_EMAIL }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      GOOGLE_CLIENT_X509_CERT_URL: ${{ secrets.GOOGLE_CLIENT_X509_CERT_URL }}
      GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
      GOOGLE_PRIVATE_KEY: ${{ secrets.GOOGLE_PRIVATE_KEY }}
      GOOGLE_PRIVATE_KEY_ID: ${{ secrets.GOOGLE_PRIVATE_KEY_ID }}
      GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
      GOOGLE_REDIRECT_URI: ${{ secrets.GOOGLE_REDIRECT_URI }}
      GOOGLE_TOKEN_URI: ${{ secrets.GOOGLE_TOKEN_URI }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}

      # Environment Variables
      DB_PORT: ${{ vars.DB_PORT }}
      DEBUG: ${{ vars.DEBUG }}
      ENABLE_FILE_LOGGING: ${{ vars.ENABLE_FILE_LOGGING }}
      FRONTEND_BASE_URL: ${{ vars.FRONTEND_BASE_URL }}
      FRONTEND_STATIC_DIR: ${{ vars.FRONTEND_STATIC_DIR }}
      MAIL_PORT: ${{ vars.MAIL_PORT }}
      MAIL_SERVER: ${{ vars.MAIL_SERVER }}
      MAIL_USE_TLS: ${{ vars.MAIL_USE_TLS }}
      MEMORY_HIGH_THRESHOLD_MB: ${{ vars.MEMORY_HIGH_THRESHOLD_MB }}
      MEMORY_LOW_THRESHOLD_MB: ${{ vars.MEMORY_LOW_THRESHOLD_MB }}
      PORT: ${{ vars.PORT }}
      SCOPES: ${{ vars.SCOPES }}

      # Repository Secrets
      MAYHEM_TOKEN: ${{ secrets.MAYHEM_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Make backend start script executable
        run: chmod +x ./server/start_backend.sh

      - name: Start your API
        run: |
          ./server/start_backend.sh > backend.log 2>&1 &
          echo "BACKEND_PID=$!" >> $GITHUB_ENV

      - name: Mayhem for API
        uses: ForAllSecure/mapi-action@v1
        continue-on-error: true
        with:
          mayhem-token: ${{ env.MAYHEM_TOKEN }}
          api-url: https://dev-swc-backend-1v2c.onrender.com/
          api-spec: https://dev-swc-backend-1v2c.onrender.com/swagger.json
          duration: 60
          sarif-report: ./mapi.sarif
      
      - name: Verify SARIF File
        run: |
          if [ -f ./mapi.sarif ]; then
            echo "SARIF file generated successfully."
            cat ./mapi.sarif
          else
            echo "SARIF file not found!"
            exit 1
          fi

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: mapi.sarif
      
      - name: Upload SARIF as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: sarif-report
          path: ./mapi.sarif

      - name: Stop Backend (Post-Run)
        if: always()
        run: |
          if [ -n "${{ env.BACKEND_PID }}" ]; then
            echo "Stopping backend process with PID ${{ env.BACKEND_PID }}"
            kill ${{ env.BACKEND_PID }} || echo "Backend process already stopped."
          fi